#!/usr/bin/env python3

import random

"""This program plays a game of Rock, Paper, Scissors between two Players,
and reports both Player's scores each round."""

moves = ['rock', 'paper', 'scissors']

"""The Player class is the parent class for all of the Players
in this game"""


class Player:

    def __init__(self):
        self.score = 0
        self.cycle_move = 0
        self.my_move = random.choice(moves)

    def move(self):
        return 'rock'

    def learn(self, my_move, their_move):
        self.my_move = their_move
        self.cycle_move = moves.index(my_move)


def beats(one, two):
    return ((one == 'rock' and two == 'scissors') or
            (one == 'scissors' and two == 'paper') or
            (one == 'paper' and two == 'rock'))


class RockPlayer(Player):
    def move(self):
        return "rock"


class RandomPlayer(Player):
    def move(self):
        return random.choice(moves)


class HumanPlayer(Player):

    def move(self):
        print("Hello Human, please choose the move you want to make "
              " 'rock', 'paper', or 'scissors'?")
        while True:
            humanMove = input("Your choice is: ").lower()
            if humanMove in moves:
                return humanMove
            else:
                print("Ops! Invalid input")


class ReflectPlayer(Player):
    def __init__(self):
        super().__init__()

    def move(self):
        return self.my_move


class CyclePlayer(Player):
    def __init__(self):
        super().__init__()

    def move(self):
        if self.cycle_move >= 2:
            return moves[0]
        else:
            return moves[self.cycle_move + 1]


class Game:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2

    def play_round(self):
        move1 = self.p1.move()
        move2 = self.p2.move()
        print(f"Player 1: {move1}  Player 2: {move2}")

        self.p1.learn(move1, move2)
        self.p2.learn(move2, move1)

        if beats(move1, move2):
            self.p1.score += 1
            print(f"---- Whooo! Player 1 has scored ----")
        elif beats(move2, move1):
            self.p2.score += 1
            print(f"---- Whooo! Player 2 has scored ----")
        else:
            self.p1.score += 1
            self.p2.score += 1
            print(f"---- Both of you have scored ----")

        print(f"Player 1 score: {self.p1.score}"
              f" Player 2 score: {self.p2.score}")

    def play_game(self):
        print("Game start!")
        print("How many rounds do you want to play? ")
        while True:
            try:
                rounds = int(input("Answer: "))
                break
            except ValueError:
                print("Ops! Please enter an integer number")
                continue
        for round in range(rounds):
            print("********************************************")
            print(f"Round {round}:")
            self.play_round()
        if self.p1.score > self.p2.score:
            print("YOU WON!!")
        elif self.p2.score > self.p1.score:
            print("Player 2 WON!!")
        else:
            print("It's a TIE, BOTH OF YOU ARE WINNERS!!")
        print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
        print("Final score!!!"
              f"\n Player 1: {self.p1.score} "
              f"\n Player 2: {self.p2.score}")
        print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
        print("Game over!")


if __name__ == '__main__':

    computer_mode = " "
    print("What type of computer mode would you like to play against?"
          "(RandomPlayer, CyclePlayer, ReflectPlayer, RockPlayer, Quit)")


while computer_mode != "Quit":
        computer_mode = input("Your choise is:  ")
        if computer_mode == "RandomPlayer":
            game = Game(HumanPlayer(), RandomPlayer())
            break
        elif computer_mode == "CyclePlayer":
            game = Game(HumanPlayer(), CyclePlayer())
            break
        elif computer_mode == "ReflectPlayer":
            game = Game(HumanPlayer(), ReflectPlayer())
            break
        elif computer_mode == "RockPlayer":
            game = Game(HumanPlayer(), RockPlayer())
            break
        elif computer_mode == "Quit":
            print("GOOD BYE!")
            exit()
        else:
            print("Invalid input!")
game.play_game()
